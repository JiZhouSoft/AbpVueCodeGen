@using Newtonsoft.Json.Linq;
@model GenCodeOutput
@{
    Layout = null;
    ViewData["Title"] = "Gen Code";
}

@if (Model != null)
{ 
    <template>
        <div class="app-container">
            <div class="app-top-buttons">
                <el-button style="margin-left: 10px;"
                           type="primary"
                           icon="el-icon-edit"
                           @@click="handleCreate">{{ $t('table.add') }}</el-button>
                <el-button v-waves
                           :loading="downloadLoading"
                           type="info"
                           icon="el-icon-download"
                           @@click="handleDownload">{{ $t('table.export') }}</el-button>
            </div>
            <div class="filter-container">
                <el-input style="width:45%;"
                          class="filter-item"
                          type="text"
                          placeholder="搜索.."
                          v-model="queryParams.filter"></el-input>
                <el-button v-waves
                           class="filter-item"
                           type="success"
                           icon="el-icon-search"
                           @@click="handleFilter">{{ $t('table.search') }}</el-button>
                <el-switch v-model="showAdvFilter"
                           active-text="高级搜索"
                           style="padding:0 10px 0 10px;"
                           inactive-text="简单搜索"></el-switch>
            </div>
            <div class="filter-container">
                <el-form ref="listFilter" label-width="180px" :inline="true">
                    @await Html.PartialAsync("GetPartCode", new PartCodeResult
                    {
                              Properties = Model.ListApi.Parameters,
                              TemplateName = TemplateType.Filters
                    })
                </el-form> 
            </div> 
            <el-table :key="tableKey"
                      v-loading="listLoading"
                      :data="list"
                      border
                      stripe
                      fit
                      highlight-current-row
                      style="width: 100%;"
                      @@sort-change="sortChange">
                <el-table-column label="Id" prop="id"
                                 sortable="custom" align="center" width="80px"
                                 :class-name="getSortClass('id')">
                    <template slot-scope="scope">
                        <span>{{ scope.row.id }}</span>
                    </template>
                </el-table-column>
                @await Html.PartialAsync("GetPartCode", new PartCodeResult
                {
                        Properties = Model.ListApi.Properties,
                        TemplateName = TemplateType.ListItem
                })
                <el-table-column fixed :label="$t('table.actions')"
                                 align="center"
                                 width="230"
                                 class-name="fixed-width">
                    <template slot-scope="{row}">
                        <el-button type="primary"
                                   size="mini"
                                   @@click="handleUpdate(row)">
                            {{ $t('table.edit') }}
                        </el-button>
                        <el-button v-if="row.status!=='deleted'"
                                   size="mini"
                                   type="danger"
                                   @@click="handleDelete(row,'deleted')">
                            {{ $t('table.delete') }}
                        </el-button>
                    </template>
                </el-table-column>
            </el-table>
            <pagination v-show="total>0"
                        :total="total"
                        :page.sync="queryParams.page"
                        :limit.sync="queryParams.maxResultCount"
                        @@pagination="getList" />

            <el-dialog :title="textMap[dialogStatus]"
                       width="700px"
                       :visible.sync="dialogFormVisible">
                <el-form ref="dataForm"
                         :rules="rules"
                         :model="editModel"
                         label-position="right"
                         label-width="150px"
                         style="width: 400px; margin-left:50px;">
                    @if (Model.UpdateApi != null || Model.CreateApi != null)
                    {
                        @await Html.PartialAsync("GetPartCode", new PartCodeResult
                        {
                            Properties = Model.UpdateApi.Properties,
                            TemplateName = TemplateType.FormItems
                        })
                    }
                </el-form>
                <div slot="footer"
                     class="dialog-footer">
                    <el-button @@click="dialogFormVisible = false">
                        {{ $t('table.cancel') }}
                    </el-button>
                    <el-button type="primary"
                               @@click="dialogStatus==='create'?createData():updateData()">
                        {{ $t('table.confirm') }}
                    </el-button>
                </div>
            </el-dialog>
            @*<el-dialog :visible.sync="dialogPageviewsVisible"
                   title="Reading statistics">
            <el-table :data="pageviewsData"
                      border
                      fit
                      highlight-current-row
                      style="width: 100%">

                <el-table-column prop="key"
                                 label="Channel" />
                <el-table-column prop="pageviews"
                                 label="Pageviews" />
            </el-table>
            <span slot="footer"
                  class="dialog-footer">
                <el-button type="primary"
                           @@click="dialogPageviewsVisible = false">{{ $t('table.confirm') }}</el-button>
            </span>
        </el-dialog>*@
        </div>
</template>

    <script lang="ts">
    import { Component, Vue } from 'vue-property-decorator'
    import { Form } from 'element-ui'
    //import { formatJson }  from '@@/utils'
    import moment from "moment";
    // import { exportJson2Excel } from '@@/utils/excel'
    import AbpBase from "@@/lib/abpbase";
    import util from '@@/lib/util';
    import ajax from '@@/utils/request'
    import Pagination from '@@/components/Pagination/index.vue'
    import {
      @Html.Raw(string.Join(",\r\n  ", Model.ImportClassNames.Distinct()) )
    } from '@@/api/abp-service-proxies'
        @@Component({
            "name": '@Model.Tag.ToLowerStart()',
            "components": {
                Pagination
            }
        })
        export default class @Model.Tag.ToLowerStart() extends AbpBase {
            private tableKey = 0;
            private list: @Model.ListApi.ListResultDtoItemName [] = [];
            private total = 0;
            private listLoading = true;
            @if (Model.UpdateApi!=null&&Model.UpdateApi.Properties.Any(o=>o.EnumDef.Keys.Count!=0))
            {
                foreach (var item in Model.UpdateApi.Properties.Where(o=>o.EnumDef.Keys.Count!=0))
                {
                    var enumDef = item.EnumDef.Select(o => "{label:'"+o.Key+"',value:"+o.Value+"}" );
                    <text>
            private @(item.Name.ToLowerStart())Options = [
                    @Html.Raw(string.Join(",\r\n                     ",enumDef))
                    ]
            </text>
                }
            }
            private queryParams = {
                @await Html.PartialAsync("GetPartCode", new PartCodeResult
                            {
                                Properties = Model.ListApi.Parameters,
                                TemplateName = TemplateType.QueryParamsDef
                })
                "skipCount": function() {
                    return (this.page - 1) * this.maxResultCount;
                },
                "maxResultCount": 20,
                "page": 1,
                "sorting": "id"
            };
            private showAdvFilter = false
            private showReviewer = false;
            private dialogFormVisible = false;
            private dialogStatus = '';
            private textMap = {
                "update": 'Edit',
                "create": 'Create'
            };
            private dialogPageviewsVisible = false;
            private pageviewsData = [];
            private rules = {
                "type": [{ "required": true, "message": 'type is required', "trigger": 'change' }],
                "timestamp": [
                    { "required": true, "message": 'timestamp is required', "trigger": 'change' }
                ],
                "title": [{ "required": true, "message": 'title is required', "trigger": 'blur' }]
            };
            private downloadLoading = false;
            private editModel: any = {};
            created() {
                this.getList()
            }
            private async getList() {
                this.listLoading = true
                const data = await this.abpService.@(Model.ListApi.JsMethodName.ToLowerStart())(
                        @await Html.PartialAsync("GetPartCode", new PartCodeResult
                            {
                                              Properties = Model.ListApi.Parameters,
                                              TemplateName = TemplateType.QueryParamsQueryCode
                            })
                    )
                this.list = data.items
                this.total = data.totalCount
                // Just to simulate the time of the request
               this.listLoading = false
            }
            private handleFilter() {
                this.getList()
            }
            @if(Model.DeleteApi!=null){
            <text>
            private handleDelete(row: any, status: string) {
                this.abpService.@(Model.DeleteApi.JsMethodName.ToLowerStart())(row.id)
                this.getList()
                this.$message({
                    "message": '操作成功',
                    "type": 'success'
                })
                row.status = status
            }
            </text>
            }
          private getSortClass(key: string) {
            const sort = this.queryParams.sorting;
            if (sort === `${key} descending`) {
              return "ascending";
            } else if (sort === `${key} descending`) {
              return "descending";
            } else {
              return "";
            }
          }
            private sortChange(data: any) {
                const { prop, order } = data;
                if (order === "ascending") {
                  this.queryParams.sorting = prop;
                } else {
                  this.queryParams.sorting = prop + " desc";
                }
                this.handleFilter();
            }

            private handleCreate() {

     @if(Model.CreateApi!=null) {
            <text>
                this.editModel = new @(Model.CreateApi.RequestDtoName)()
            </text>
         }
                this.dialogStatus = 'create'
                this.dialogFormVisible = true
                this.$nextTick(() => {
                    (this.$refs['dataForm'] as Form).clearValidate()
                })
            }

            private abpService = new  @(Model.ServiceClassName)(ajax);
   @if(Model.CreateApi!=null) {
             <text>

            private createData() {
                (this.$refs['dataForm'] as Form).validate(async valid => {
                    if (valid) {
                        this.editModel.id = null
                        const data = await this.abpService.@(Model.CreateApi.JsMethodName.ToLowerStart())(this.editModel as @Model.CreateApi.RequestDtoName)
                        //this.list.unshift(data)
                        this.getList()
                        this.dialogFormVisible = false

                        this.$notify({
                            "title": '成功',
                            "message": '创建成功',
                            "type": 'success',
                            "duration": 2000
                        })
                    }
                })
            }
        </text>
}
@if(Model.UpdateApi!=null) {<text>
  private handleUpdate(row: any) {
        this.editModel = Object.assign({}, row)
        this.dialogStatus = 'update'
        this.dialogFormVisible = true
        this.$nextTick(() => {
            (this.$refs['dataForm'] as Form).clearValidate()
        })
    }
  private updateData() {
        (this.$refs['dataForm'] as Form).validate(async valid => {
            if (valid) {
                const editInput = Object.assign(new @(Model.UpdateApi.RequestDtoName)(), this.editModel);
                const data = await this.abpService.@(Model.UpdateApi.JsMethodName.ToLowerStart())(editInput);
                this.getList()
                this.dialogFormVisible = false
                this.$notify({
                    "title": '成功',
                    "message": '更新成功',
                    "type": 'success',
                    "duration": 2000
                })
            }
        })
    }
</text>
}
  private async handleDownload() {
        this.downloadLoading = true
        //const tHeader = ['timestamp', 'title', 'type', 'importance', 'status']
        //const filterVal = ['timestamp', 'title', 'type', 'importance', 'status']
        //const data = formatJson(filterVal, this.list)
        //exportJson2Excel(tHeader, data, 'table-list')
       //this.downloadLoading = false
        const resultfile = await this.abpService.get@(Model.Tag.ToUpperStart())ToExcel(
                        @await Html.PartialAsync("GetPartCode", new PartCodeResult
                            {
                                              Properties = Model.ListApi.Parameters,
                                              TemplateName = TemplateType.QueryParamsDwonloadCode
                            })
                    )
        util.downloadTempFile(resultfile)
    }
}
    </script>

}
else
{
    <form action="GenCode" method="post">
        Json :<br />
        <textarea name="json"></textarea>
        <button type="submit" class="btn btn-default navbar-btn">Submit</button>
    </form>
}
